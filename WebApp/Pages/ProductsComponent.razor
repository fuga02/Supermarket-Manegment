@page "/products"
@inject IViewProductsUseCase ViewProductsUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject NavigationManager NavigationManager
@inject IDeleteProductUseCase DeleteProductUseCase
<h3>Products</h3>

@{
    if (products != null)
    {
        <table class="table">
            <thead>
            <tr>
                <th>Product Category</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td>@GetCategoryByIdUseCase.Execute(@product.CategoryId!.Value)?.Name</td>
                        <td>@product.Name</td>
                        <td>@Math.Round(product.Price!.Value,2)</td>
                        <td>@product.Quantity</td>
                        <td>
                            <button type="button" class="btn btn-primary" @onclick="(() => EditProduct(product))">Edit</button>
                            <button type="button" class="btn btn-primary" @onclick="(() => DeleteProduct(product.ProductId))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
<br />
<button type="button" @onclick="AddAction" class="btn btn-primary">Add Product</button>


@code {
    private IEnumerable<Product> products;

    protected override void OnInitialized()
    {
       products =  ViewProductsUseCase.Execute();
    }

    private void AddAction()
    {
        NavigationManager.NavigateTo("/addProduct");
    }

    private void EditProduct(Product product)
    {
        NavigationManager.NavigateTo($"/editProduct/{product.ProductId}");
    }

    private void DeleteProduct(int productId)
    {
        DeleteProductUseCase.Execute(productId);
    }
}
