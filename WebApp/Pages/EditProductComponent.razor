@page "/editProduct/{productId}"
<h3>Edit Product</h3>
@inject NavigationManager NavigationManager
@inject IAddProductUseCase AddProductUseCase
@inject IGetProductByIdUseCase GetProductByIdUseCase 
@inject IEditProductUseCase EditProductUseCase
@inject IViewCategoriesUseCase ViewCategoriesUseCase
<h3>Edit  Product</h3>

@{
    if (product != null)
    {
        <EditForm Model="product" class="row g-3" OnInvalidSubmit="OnValidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div >
                <label for="name">Name</label>
                <InputText id="name" @bind-Value="product.Name" ></InputText>
            </div>

            <div >
                <label for="category">Category</label>
                <select id="category" @bind="product.CategoryId" class="form-control">
                    <option  selected="">
                    </option>
                    @foreach (var cat in categories)
                    {
                        <option value="@cat.CategoryId">@cat.Name</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="price">Price</label>
                <InputNumber id="price" @bind-Value="product.Price" @bind-Value:format ="F2" class ="form-control"></InputNumber>
            </div>
            <div>
                <label for="qty">Quantity</label>
                <InputNumber id="qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
            </div>

            <button type="submit" class="btn btn-primary" @onclick="OnValidSubmit" >Save</button>
            <button type="submit" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
        </EditForm>
    }
}



@code {
    
    [Parameter]
    public string productId { get; set; }

    private Product? product;
    private IEnumerable<Category> categories;
    protected override void OnInitialized()
    {
        categories = ViewCategoriesUseCase.Execute();
    }

    protected override void OnParametersSet()
    {
        if (int.TryParse(this.productId, out int iProductId))
        {
            var prod = GetProductByIdUseCase.Execute(iProductId);
            this.product = new Product()
            {
                ProductId = prod.ProductId, Name = prod.Name, CategoryId = prod.CategoryId,
                Price = prod.Price,Quantity = prod.Quantity
            };
        }
    }

    private void OnValidSubmit()
    {
        EditProductUseCase.Execute(this.product!);
        NavigationManager.NavigateTo("/products");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/products");
    }

}