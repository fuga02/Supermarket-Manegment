@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IViewProductsByCategoryId ViewProductsByCategoryId



<div >
    <label for="category">Category</label>
    <select id="category" @bind="SelectedCategoryId" class="form-control">
        <option  selected="">
        </option>
        @foreach (var cat in categories)
        {
            <option value="@cat.CategoryId">@cat.Name</option>
        }
    </select>
</div>

@{
    if (productsInCategory != null)
    {
        <table class="table">
            <thead>
            <tr>
                <th>Product Name</th>
                <th>Quantity </th>
            </tr>
            </thead>
            <tbody>
                 @foreach (var prod in productsInCategory)
                 {
                     <tr>
                        <td>@prod.Name</td>
                        <td>@prod.Quantity</td>
                     </tr>
                 }
            </tbody>
        </table>   
    }
}

@code {
    private IEnumerable<Product> productsInCategory;
    private int selectedCategoryId;

    private int SelectedCategoryId
    {
        get => selectedCategoryId;
        set
        {
            selectedCategoryId = value;
            productsInCategory = ViewProductsByCategoryId.Execute(value);
            StateHasChanged();
        }
    }


    private IEnumerable<Category> categories;
    protected override void OnInitialized()
    {
        categories = ViewCategoriesUseCase.Execute();
    }

}
